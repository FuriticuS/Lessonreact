{"version":3,"sources":["redux/reducer/userPage.js","api/api.js","components/users/img/loader.gif","redux/reducer/sidebar.js","redux/reducer/auth-reducer.js","redux/reducer/app-reducer.js","redux/redux-store.js","redux/State.js","components/navigation/friends/Friends.js","components/navigation/Navigation.js","components/settings/Settings.js","components/header/Header.js","components/header/HeaderContainer.js","components/login/LoginForm/LoginForm.js","components/login/LoginReduxForm.js","components/login/Login.js","App.js","serviceWorker.js","index.js","components/preloader/Preloader.js","utils/validators/validators.js","redux/reducer/profilePage.js","redux/reducer/dialogsPage.js","components/FormsControls/FormsControls.js"],"names":["initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProcess","followAC","userId","type","unFollowAC","setUserAC","setCurrentPageAC","toggleIsFetchingAC","toggleFollowingProgress","getPagesThunkCreator","dispath","a","getPages","data","items","count","totalCount","getUsersThunkCreator","pageNumber","dispatch","getUsers","userPageReducer","state","action","map","user","id","followed","filter","instance","axios","baseURL","withCredentials","getProfile","userID","get","then","response","authUser","delUnfollow","delete","postFollow","post","pofileAPI","getStatus","updateStatus","text","put","status","loginUser","email","password","rememberMe","logoutUser","module","exports","userData","logo","name","sidebarReducer","login","isAuth","setAuthUserData","payload","getAuthUserData","resultCode","authReducer","initialized","appReducer","reducers","combineReducers","profilePage","profilePageReducer","dialogsPage","dialogsPageReducer","sidebar","usersPage","auth","form","formReducer","Store","createStore","applyMiddleware","thunkMiddleware","window","store","State","_State","postData","likes","newPostText","dialogsData","age","avatarUrl","textData","newMessagesText","getState","this","_callSubscriber","console","log","subscribe","observer","Friends","props","src","alt","Navigation","userFriend","userItem","friends","key","className","to","activeClassName","Settings","Header","onClick","logout","HeaderContainer","React","Component","connect","maxLength","maxLengthCreator","LoginForm","onSubmit","handleSubmit","Field","component","inputForm","placeholder","validate","requiredField","touchCheck","error","LoginReduxForm","reduxForm","errorMessages","messages","length","stopSubmit","_error","formData","DialogsContainer","lazy","ProfileContainer","UsersContainer","News","Music","App","initializeApp","appState","path","render","fallback","Preloader","compose","withRouter","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","preloader","value","inputLength","maxlength","checked","profile","addPostActionCreator","newMessagesPostText","setStatus","newPost","p","postId","addNewMessageActionCreator","newMessages","TextArea","input","meta","showError","touched"],"mappings":"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","file":"static/js/main.00934d20.chunk.js","sourcesContent":["// ------ action type сделаем переменные для все type в наших функциях\r\nimport {getPages, getUsers} from \"../../api/api\";\r\nimport * as api from \"../../api/api\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\n//для кнопки follow\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\n//для нашего Redux зададим начальные значения\r\nlet initialState = {\r\n    users:[ ],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    //loader кнопки follow\r\n    followingInProcess: []\r\n};\r\n\r\nconst userPageReducer = (state = initialState, action) => {\r\n\r\n    // для нашей функции state = this._State.profilePage\r\n    // вместо if используем switch\r\n    switch (action.type) {\r\n        // если надо зафоловить user\r\n        // 1 - возвращаем копию всего state\r\n        // 2 - в этом state делаем копию user\r\n        // 3 - и конкретному user тоже делаем копию\r\n        //тоже самое что и users: [...state.users]\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if (user.id === action.userId)\r\n                    {\r\n                        return {...user, followed: true}\r\n                    }\r\n                    return user;\r\n                })\r\n            };\r\n        //тоже самое что и users: [...state.users]\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if (user.id === action.userId)\r\n                    {\r\n                        return {...user, followed: false}\r\n                    }\r\n                    return user;\r\n                })\r\n            };\r\n\r\n            //с сервера прийдут юзеры и будет их отрисовка\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n\r\n        //действие для клика по кнопкам страниц номера\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage //выбираем ту страницу по которой кликнули\r\n            }\r\n\r\n        // --- вывод страниц users\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.count\r\n            }\r\n\r\n        // --- preloader страницы users\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n\r\n        // --- loader для follow на странице users\r\n        case  TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProcess: action.followingInProcess\r\n                    ? [...state.followingInProcess, action.userId]\r\n                    : state.followingInProcess.filter(id => id != action.userId)\r\n            }\r\n\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\n// --- задает тип для user follow или unfollow\r\nexport const followAC = (userId) => {\r\n    return {\r\n        type:FOLLOW,\r\n        userId\r\n    }\r\n}\r\n\r\nexport const unFollowAC = (userId) => {\r\n    return {\r\n        type:UNFOLLOW,\r\n        userId\r\n    }\r\n}\r\n// --- получаем список user с сервера и записывать его, setatь userов\r\nexport const setUserAC = (users) => {\r\n    return {\r\n        type: SET_USERS,\r\n        users\r\n    }\r\n}\r\n// --- получаем текущую страницу на которой мы и какая активна\r\nexport const setCurrentPageAC = (currentPage) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage: currentPage\r\n    }\r\n}\r\n// --- установить общее количество пользователей\r\nexport const setTotalUsersCountAC = (totalUsersCount) => {\r\n    return {\r\n        type: SET_TOTAL_USERS_COUNT,\r\n        count: totalUsersCount\r\n    }\r\n}\r\n//--- preloader для страницы users\r\nexport const toggleIsFetchingAC = (isFetching) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching: isFetching\r\n    }\r\n}\r\n//--- loader для follow на странице users\r\nexport const toggleFollowingProgress = (followingInProcess, userId) => {\r\n    return {\r\n        type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n        followingInProcess: followingInProcess,\r\n        userId: userId\r\n    }\r\n}\r\n\r\n//-------------------------------------------------thunk for UserContainer.js\r\nexport const getPagesThunkCreator = (currentPage,pageSize) => {\r\n    return async (dispath) => {\r\n        //--- задиспачим отображение preloader перед началом запроса\r\n        dispath(toggleIsFetchingAC(true));\r\n        //--- задиспачим отображение выбранной страницы\r\n        dispath(setCurrentPageAC(currentPage));\r\n\r\n        // get запрос из папки api для получения кол-ва страниц\r\n        let data = await getPages(currentPage, pageSize)\r\n        //--- задиспачим конец отображения preloader после запроса\r\n        dispath(toggleIsFetchingAC(false));\r\n        // получаем ответ и записывам его\r\n        dispath(setUserAC(data.items));\r\n        dispath(setTotalUsersCountAC(data.totalCount));\r\n    }\r\n}\r\n\r\n//-------------------------------------------------thunk for UserContainer.js\r\nexport const getUsersThunkCreator = (pageNumber, pageSize) => {\r\n    return async (dispatch) => {\r\n        dispatch(setCurrentPageAC(pageNumber));\r\n        //--- отображение preloader перед началом запроса\r\n        dispatch(toggleIsFetchingAC(true));\r\n        // get запрос из папки api для получения всех users\r\n        let data = await getUsers(pageNumber, pageSize)\r\n        //--- конец отображения preloader после запроса\r\n        dispatch(toggleIsFetchingAC(false));\r\n        // получаем ответ и записывам его\r\n        dispatch(setUserAC(data.items));\r\n    }\r\n}\r\n\r\n//-------------------------------------------------thunk for User.js\r\nexport const follow = (userId) => {\r\n    return async (dispatch) => {\r\n        // loader для ожидания follow\r\n        dispatch(toggleFollowingProgress(true, userId));\r\n\r\n        // запрос на подписку\r\n        let response = await api.postFollow(userId);\r\n        // удачный ответ после запроса === 0\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(followAC(userId));\r\n        }\r\n        // loader после окончания ожидания unfollow\r\n        dispatch(toggleFollowingProgress(false, userId));\r\n    }\r\n}\r\n\r\n//-------------------------------------------------thunk for User.js\r\nexport const unfollow = (userId) => {\r\n    return async (dispatch) => {\r\n        // loader для ожидания follow\r\n        dispatch(toggleFollowingProgress(true, userId));\r\n        // запрос на отписку\r\n        let response = await api.delUnfollow(userId);\r\n        // удачный ответ после запроса === 0\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(unFollowAC(userId));\r\n        }\r\n        // loader после окончания ожидания unfollow\r\n        dispatch(toggleFollowingProgress(false, userId));\r\n    }\r\n}\r\n\r\nexport default userPageReducer;\r\n","import * as axios from \"axios\";\r\n\r\n// так как везде url одинаковый создадим переменную - 1 вариант сокращения кода\r\nconst baseUrl = `https://social-network.samuraijs.com/api/1.0/`;\r\n\r\n//создаем axios с условиями для всех запросов - 2 вариант сокращения кода\r\nconst instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    'API-KEY':'614a97b4-e7f5-4aa7-8483-5a00861c0bf2',\r\n});\r\n\r\n//создаем axios с условиями для всех запросов - 2 вариант сокращения кода\r\nexport const getProfile = (userID) => {\r\n    // get запрос на адрес https://social-network.samuraijs.com/api/1.0/ хотим получить users\r\n    return instance.get(`profile/` + userID);\r\n};\r\n\r\n// axios запрос для компоненты UsersContainer c параметрами currentPage и pageSize, которые зададим при вызове, чтобы получить кол-ва страниц\r\nexport const getPages = (currentPage = 1,pageSize = 10)=> {\r\n    return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => {\r\n        return response.data;\r\n    });\r\n}\r\n\r\n// axios запрос для компоненты UsersContainer c параметрами currentPage и pageSize, которые зададим при вызове, чтобы получить users\r\nexport const getUsers = (pageNumber, pageSize)=> {\r\n    return instance.get(`users?page=${pageNumber}&count=${pageSize}`).then(response => {\r\n        return response.data;\r\n    });\r\n}\r\n\r\n// axios запрос для получения users для header\r\nexport const authUser = () => {\r\n    return instance.get(`auth/me`);\r\n}\r\n\r\n// axios запрос на отписку unfollow для users\r\nexport const delUnfollow = (userId) => {\r\n    return instance.delete(`follow/${userId}`);\r\n};\r\n\r\n// axios запрос на подписку follow для users\r\nexport const postFollow = (userId) => {\r\n    return instance.post(`follow/${userId}`);\r\n};\r\n\r\n\r\n//------------------------------------------------------------------ для компоненты Profile\r\n// axios запрос на profile для получения данных с API и полученные данные переносим в ProfileContainer\r\n// карта переноса = api.js ->\r\n// profilePage(добавить в initialState - сделать const тип - добавить в reducer case по типу - сделать Action create для status - создать thunk для get запроса) ->\r\n// ProfileContainer (делаем map для status в mapStateToProps - делаем connect для методов get и update - запихиваем в componentDidMount - передаем в компоненту новые пропсы как status={this.props.status} и updateStatus={this.props.updateStatus}) ->\r\n// Profile (прокидываем пропсы в наш компонент Info как status={props.status} updateStatus={props.updateStatus}) ->\r\n// Info (прокидываем пропсы в наш компонент ProfileStatus как status={props.status} updateStatus={props.updateStatus}) ->\r\n// ProfileStatus (добавляем activateEditMode добавляем deActivateEditMode добавляем в input все наши данные)\r\n\r\nexport const pofileAPI = {\r\n    getProfile(userId){\r\n        return instance.get(`profile/`+userId);\r\n    },\r\n    getStatus(userId) {\r\n        return instance.get(`profile/status/`+userId);\r\n    },\r\n    // для изменения статуса отправляет пут запрос и заменяем статус старый на новый статус\r\n    // status - это имя на сервере для статуса\r\n    // text - это что мы изменили\r\n    updateStatus(text){\r\n        return instance.put(`profile/status`, {status: text});\r\n    }\r\n};\r\n\r\n// axios POST запрос для авторизации с нашего сайта напрямую\r\n// вместе с post запросом на сервер отправляются в запросе данные в {}\r\n// где rememberMe пока что false - наш чекбокс\r\nexport const loginUser = (email, password, rememberMe=false) => {\r\n    return instance.post(`auth/login`, {email:email, password:password, rememberMe:rememberMe});\r\n}\r\n\r\n// axios delete запрос чтобы выйти с авторизации\r\nexport const logoutUser = () => {\r\n    return instance.delete(`auth/login`);\r\n}\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/loader.f90ea624.gif\";","//для нашего Redux зададим начальные значения\r\nlet initialState = {\r\n    userData:[\r\n        {\r\n            logo: \"https://gordonua.com/img/article/1880/74_tn.jpg\",\r\n            name: \"Alex\"\r\n        },\r\n        {\r\n            logo: \"https://bigpicture.ru/wp-content/uploads/2019/04/grandbeauty00.jpg\",\r\n            name: \"Lora\"\r\n        },\r\n        {\r\n            logo: \"https://i.pinimg.com/originals/e8/83/7b/e8837b00067930f307a825c2ff74f3fa.jpg\",\r\n            name: \"Sveta\"\r\n        }\r\n    ]\r\n}\r\n\r\nconst sidebarReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default sidebarReducer;\r\n","// ------ action type сделаем переменные для всех type в наших функциях\r\nimport {authUser, loginUser, logoutUser} from \"../../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = 'auth/SET_USER_DATA';\r\n\r\n//для нашего запроса посмотрим API документацию и зададим для переменных их нулевые значения\r\nlet initialState = {\r\n    // данные из документашки с back API - userId, email, login\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    //если залогинен то true\r\n    isAuth: false\r\n};\r\n\r\n//создаем редьюсор для login и добавляем его в коллекцию redux-store\r\nconst authReducer = (state = initialState, action) => {\r\n\r\n    // для нашей функции state = this._State.profilePage\r\n    // вместо if используем switch\r\n    switch (action.type) {\r\n\r\n        case SET_USER_DATA:\r\n            return {\r\n                // получим state и перезапишем его\r\n                ...state,\r\n                // все данные лежат в action (state тоже)\r\n                // - payload - в ней лежит userId, email, login, isAuth\r\n                ...action.payload,\r\n            };\r\n\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\n// --- задача этой функции вернуть объект action\r\n// --- упаковываем action в объект который будет задиспачен в reducer\r\nexport const setAuthUserData = (userId, email, login, isAuth) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        payload: {\r\n            userId,\r\n            email,\r\n            login,\r\n            isAuth\r\n        }\r\n    }\r\n}\r\n\r\n//-------------------------------------------------thunk for header авторизация\r\n// добавляем новое = await и async\r\nexport const getAuthUserData = () => async (dispatch) => {\r\n\r\n    // get запрос на адрес https://social-network.samuraijs.com/api/1.0/ хотим получить users\r\n    let response = await authUser();\r\n    //делаем проверку зарегистрирован пользователь или нет\r\n    // response - приходит с запросом с сервера, в нем лежит data, в дате лежит resultCode - eckjdbt в документашке API\r\n    if (response.data.resultCode === 0) {\r\n        // response.data - метод axios, а data->userId , data->email, data->login - это в документашке api описание в разделе Properties\r\n        let {id, login, email} = response.data.data;\r\n\r\n        // если все ок до dispatch\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\n//------------------------------------------------- thunk функция для аторизации прямо с сайта\r\n// 1 - создаем thunk для логанизации\r\n// 2 - в api.js создаем Post запрос для авторизации на сервере (73 строка)\r\n// 3 - в api.js создаем logout с помощью запроса delete\r\n// 4 - обращаемся в нашей thunk к созданным функциям login и logout\r\n// 5 - если все хорошо тогда вызываем thunk getAuthUserData чтобы отобразить login в хедере\r\n// 6 - создаем thunk для logout\r\n// 7 - передаем значение true для isAuth в getAuthUserData в dispatch(setAuthUserData(true))\r\n// 8 - создаем hoc компоненту для копоненты Login и ей в connect передаем (login и logout)\r\n// 9 - создаем собыетие для пропсов LoginReduxForm onSubmit={onSubmit}\r\n// 10 - создаем mapStateToProps который возьмет reducer isAuth в redux-store\r\n// 11 - если все успешно и isAuth = true то redirect на страницу profile\r\nexport const login = (email, password, rememberMe) => async (dispatch) => {\r\n    let response = await loginUser(email, password, rememberMe, true);\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData());\r\n    }\r\n        // если в поле к примеру ПАРОЛЬ введено неправильное значение\r\n        // где login - название нашей формы, а email - где проблема\r\n        // чтобы сервер сам нам описал ошибку заведем переменную в которую будет записываться массив ошибок\r\n        // где response.data.messages.length название и длина сообщения с сервера\r\n        // https://social-network.samuraijs.com/docs#auth_login_post здесь все ответы\r\n    // где _error реакция на все ошибки в форме\r\n    else {\r\n        let errorMessages = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: errorMessages}));\r\n    }\r\n};\r\n// 1 - создаем thunk для logout\r\n// 2 - в setAuthUserData добавляем переменную isAuth\r\n// 3 - в isAuth передать false\r\n// 4 - занулить все наши значения в dispatch\r\n// 5 - в Header компоненте создаем кнопку logout\r\n// 6 - создаем событие onClick={props.logout} где ждем пропсы от контейнейрной компоненты\r\n// 7 - в HeaderContainer в методе connect конектим наш logout из auth-reducer\r\nexport const logout = () => async (dispatch) => {\r\n    let response = await logoutUser()\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false));\r\n        }\r\n}\r\n\r\nexport default authReducer;\r\n\r\n// после создания REDUCER - мы должны его зписать в reducer-store, чтобы могли его вызвать\r\n","// ------ проверка авторизации пользователя для отображения страниц\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\n// проверка по типу\r\nexport const initializedSuccess = () => ({\r\n    type: INITIALIZED_SUCCESS\r\n})\r\n\r\n//для нашей загрузки всех старниц сделаем переменную для проверки\r\nlet initialState = {\r\n    initialized : false,\r\n};\r\n\r\n//создаем редьюсор для проверки авторизации и добавляем его в коллекцию redux-store\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                // получим state и перезапишем его\r\n                ...state,\r\n                initialized: true,\r\n            };\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\n// создаем thunk'у для initializedSuccess\r\n// в которой 1 - проверка авторизации\r\n// 2 - иницилизация авторизации\r\n// 3 - когда только зарезолвишься тогда и запцскай initializedSuccess\r\nexport const initializeApp = () => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData());\r\n\r\n    promise.then(() => {\r\n        dispatch(initializedSuccess());\r\n    })\r\n}\r\n\r\nexport default appReducer;\r\n\r\n// после создания REDUCER - мы должны его зписать в reducer-store, чтобы могли его вызвать\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\n\r\n//reducer\r\nimport profilePageReducer from \"./reducer/profilePage\";\r\nimport dialogsPageReducer from \"./reducer/dialogsPage\";\r\nimport sidebarReducer from \"./reducer/sidebar\";\r\nimport userPageReducer from \"./reducer/userPage\";\r\nimport authReducer from \"./reducer/auth-reducer\";\r\nimport appReducer from \"./reducer/app-reducer\";\r\n\r\n//form\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\n//импорт thunk после установки пакета\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\n// объеденим наши созданные reducer в один\r\nlet reducers = combineReducers({\r\n    profilePage: profilePageReducer,\r\n    dialogsPage: dialogsPageReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: userPageReducer,\r\n    auth: authReducer,\r\n    appReducer: appReducer,\r\n    form: formReducer,\r\n});\r\n\r\n// где applyMiddleware промежуточные слои для диспатчей\r\nlet Store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = Store;\r\n\r\nexport default Store;\r\n","// ------ import reducer для наших компонент\r\nimport profilePageReducer from \"./reducer/profilePage\";\r\nimport dialogsPageReducer from \"./reducer/dialogsPage\";\r\nimport sidebarReducer from \"./reducer/sidebar\";\r\n\r\n// ------ объект ООП в котором будут храниться наши массивы(они же свойства) и методы(они же функции)\r\nlet State = {\r\n    //--- все наши данные\r\n    _State : {\r\n\r\n        // разобьем на подобьект для понимания где что находится\r\n        profilePage: {\r\n            postData: [\r\n                {id: 1, post: 'как все начиналось? ', likes: 5},\r\n                {id: 2, post: 'фото без подписи', likes: 7},\r\n                {id: 3, post: 'снимки без текста', likes: 3},\r\n                {id: 4, post: 'быть для высокой конверсии', likes: 5},\r\n                {id: 5, post: 'В странах СНГ ситуация', likes: 8}\r\n            ],\r\n            newPostText: 'Введите сообщение для страницы Profile'\r\n        },\r\n\r\n        dialogsPage: {\r\n            dialogsData: [\r\n                {\r\n                    id: 1,\r\n                    name: \"Dima\",\r\n                    age: 24,\r\n                    avatarUrl: 'https://cdn.iconscout.com/icon/free/png-256/avatar-380-456332.png'\r\n                },\r\n                {\r\n                    id: 2,\r\n                    name: \"Sveta\",\r\n                    age: 27,\r\n                    avatarUrl: 'https://www.pngarts.com/files/3/Avatar-PNG-High-Quality-Image.png'\r\n                },\r\n                {\r\n                    id: 3,\r\n                    name: \"Lena\",\r\n                    age: 29,\r\n                    avatarUrl: 'https://www.pngarts.com/files/3/Avatar-PNG-High-Quality-Image.png'\r\n                },\r\n                {\r\n                    id: 4,\r\n                    name: \"Oleg\",\r\n                    age: 23,\r\n                    avatarUrl: 'https://cdn.iconscout.com/icon/free/png-256/avatar-380-456332.png'\r\n                },\r\n                {\r\n                    id: 5,\r\n                    name: \"Sasha\",\r\n                    age: 21,\r\n                    avatarUrl: 'https://www.pngarts.com/files/3/Avatar-PNG-High-Quality-Image.png'\r\n                }\r\n            ],\r\n\r\n            textData: [\r\n                {id: 1, text: 'Hi'},\r\n                {id: 2, text: 'Hello'},\r\n                {id: 3, text: 'Whats up?'},\r\n                {id: 4, text: 'Its ok'},\r\n                {id: 5, text: 'Lets go'},\r\n                {id: 6, text: 'Cool'},\r\n            ],\r\n\r\n            newMessagesText: 'Введите сообщение для страницы Dialogs',\r\n        },\r\n\r\n        sidebar: {\r\n            userData:[\r\n                {\r\n                    logo: \"https://gordonua.com/img/article/1880/74_tn.jpg\",\r\n                    name: \"Alex\"\r\n                },\r\n                {\r\n                    logo: \"https://bigpicture.ru/wp-content/uploads/2019/04/grandbeauty00.jpg\",\r\n                    name: \"Lora\"\r\n                },\r\n                {\r\n                    logo: \"https://i.pinimg.com/originals/e8/83/7b/e8837b00067930f307a825c2ff74f3fa.jpg\",\r\n                    name: \"Sveta\"\r\n                }\r\n\r\n            ]\r\n        }\r\n\r\n    },\r\n    //--- метод возврата State\r\n    getState() {\r\n        return this._State;\r\n    },\r\n\r\n    //--- метод перерисовка дерева нулевая функция\r\n    _callSubscriber() {\r\n        console.log('state changed');\r\n    },\r\n    //--- метод перерисовка дерева\r\n    subscribe(observer) {\r\n        this._callSubscriber = observer; // observer - это наблюдатель за изменениями\r\n    },\r\n\r\n    //--- один метод dispatch() для всех функций который принимает ОБЬЕКТ action и смотрит TYPE\r\n    //--- к примеру action может быть {type:addPost}\r\n    dispatch(action) {\r\n\r\n        // работа с reducer\r\n        this._State.profilePage = profilePageReducer(this._State.profilePage, action);\r\n\r\n        this._State.dialogsPage = dialogsPageReducer(this._State.dialogsPage, action);\r\n\r\n        this._State.sidebar.userData = sidebarReducer(this._State.sidebar.userData, action);\r\n\r\n        // уведомить подписчика об изменениях в UI\r\n        this._callSubscriber(this._State);\r\n    }\r\n\r\n};\r\n\r\nexport default State;\r\n","import React from \"react\";\r\n\r\nimport './freinds.css'\r\n\r\nconst Friends = (props) => {\r\n    return (\r\n        <li>\r\n            <img src={props.logo} alt=\"logoName\"/>\r\n            {props.name}\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Friends;\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Friends from \"./friends/Friends\";\r\n\r\nimport './navigation.css';\r\n\r\nconst Navigation = (props) => {\r\n    let userFriend = props.userItem.map( (friends) => <Friends logo = {friends.logo} name = {friends.name} key={friends.id}/>);\r\n\r\n    return(\r\n        <nav className=\"navigation\">\r\n            <ul>\r\n                {/*a href=\"\" - это обычные ссылки а нам надо NavLink to=\"\"*/}\r\n                {/*при NavLink добавляется к каждой ссылке класс .active */}\r\n\r\n                <li><NavLink to=\"/profile\" activeClassName={\"active\"}>Profile</NavLink></li>\r\n                <li><NavLink to=\"/dialogs\">Messages</NavLink></li>\r\n                <li><NavLink to=\"/news\">News</NavLink></li>\r\n                <li><NavLink to=\"/music\">Music</NavLink></li>\r\n                <li><NavLink to=\"/users\">Users</NavLink></li>\r\n\r\n                <li className=\"navigation-settings\"><NavLink to=\"/settings\">Settings</NavLink></li>\r\n            </ul>\r\n\r\n            {/*старая запись*/}\r\n            {/*<Friends name={props.name}/>*/}\r\n\r\n            <div className=\"friends\">\r\n                <h2>Friends</h2>\r\n\r\n                <ul className=\"friends-list\">\r\n                    {userFriend}\r\n                </ul>\r\n\r\n            </div>\r\n\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\n\r\nimport './settings.css';\r\n\r\nconst Settings = () => {\r\n    return(\r\n        <div className=\"settings\">\r\n            Settings\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Settings;\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nimport './header.css';\r\n\r\n\r\nconst Header = (props) => {\r\n    return(\r\n        <header className=\"header\">\r\n            {/*ссылка на главную*/}\r\n            <NavLink to={'/'}><img src=\"https://s2.logaster.com/static/v3/img/products/logo.png\" alt=\"logo\"/></NavLink>\r\n\r\n            {/*блок регистрации*/}\r\n            <div className=\"loginBlock\">\r\n                {\r\n                    // если мы авторизованы то покажем одно если нет то другое\r\n                    props.isAuth\r\n                        ? <div>Пользователь залогинен и его логин = {props.login} <button onClick={props.logout}>Logout</button></div>\r\n                        : <NavLink to={'/login'}>Login</NavLink>\r\n                }\r\n\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {logout} from \"../../redux/reducer/auth-reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\n//в первой функции запрос + отрисовка компоненты\r\nclass HeaderContainer extends React.Component{\r\n\r\n    render() {\r\n        return(\r\n            <Header {...this.props}/>\r\n        );\r\n    }\r\n};\r\n\r\n//во второй функции данные\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n});\r\n\r\n//в третьей функции созданный action create - сразу во второй параметр connect`a\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);\r\n","import React from \"react\";\r\nimport {Field} from \"redux-form\";\r\nimport {inputForm} from \"../../FormsControls/FormsControls\";\r\nimport {maxLengthCreator, requiredField, touchCheck} from \"../../../utils/validators/validators\";\r\n\r\n// кол-во символов в полях ввода\r\nconst maxLength = maxLengthCreator(30);\r\n\r\nconst LoginForm = (props) => {\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n\r\n            {/*1. устанавливаем redux-form*/}\r\n            {/*2. добавляем в redux-store (import { reducer as formReducer } from 'redux-form')*/}\r\n            {/*3. указываем в reducers - именно form: formReducer */}\r\n            {/*4. добавляем hoc от redux-form = ContactForm = reduxForm в нашем случае LoginReduxForm*/}\r\n            {/*5. заполняем строковые имя беря имя в form*/}\r\n            {/*6. LoginReduxForm добавляем в Login вместо прямого пути в LoginForm*/}\r\n            {/*7. меняем input на Field*/}\r\n            {/*8. добавляем свойство name*/}\r\n            {/*9. добавляем form'e onSubmit={props.handleSubmit} который приходт в пропсах от form-redux*/}\r\n            {/*10. компоненте LoginReduxForm дать атрибут onSubmit={}*/}\r\n            {/*11. в компоненте LoginReduxForm сделать функцию для сбора инфы с input onSubmit*/}\r\n\r\n            <div className=\"name\">\r\n                <Field component={inputForm} name={\"email\"} placeholder={\"email\"} validate={[requiredField,maxLength]}/>\r\n            </div>\r\n\r\n            <div className=\"password\">\r\n                <Field component={inputForm} name={\"password\"} placeholder={\"password\"} type={\"password\"} validate={[requiredField,maxLength]}/>\r\n            </div>\r\n\r\n            <div className=\"remember-checkbox\">\r\n                <Field component={inputForm} name={\"rememberMe\"} type={\"checkbox\"} validate={[touchCheck]}/> remeber me\r\n            </div>\r\n\r\n            {/*Если ошибка в пароле или email отобразить блок*/}\r\n            {\r\n                props.error &&\r\n\r\n                <div className=\"error-message\">\r\n                    {props.error}\r\n                </div>\r\n            }\r\n\r\n            <div className=\"btn\">\r\n                <button>login</button>\r\n            </div>\r\n\r\n        </form>\r\n    );\r\n\r\n}\r\n\r\nexport default LoginForm;\r\n","import React from 'react'\r\nimport {reduxForm } from 'redux-form'\r\nimport LoginForm from \"./LoginForm/LoginForm\";\r\n\r\nlet LoginReduxForm = reduxForm({\r\n    form: 'login',\r\n})(LoginForm);\r\n\r\nexport default LoginReduxForm;\r\n","import React from \"react\";\r\nimport LoginReduxForm from \"./LoginReduxForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {login, logout} from \"../../redux/reducer/auth-reducer\";\r\n\r\nconst Login = (props) => {\r\n\r\n    // проверка данных + отправка на сервер\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe);\r\n    }\r\n\r\n    // если пользователь залогинен то перейти на страницу profile\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"} />\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h1>Login</h1>\r\n\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n// берем auth из state в redux-store\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {login})(Login);\r\n","import React, { Suspense } from 'react';\n\nimport {Route, withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {initializeApp} from \"./redux/reducer/app-reducer\";\n\nimport Navigation from \"./components/navigation/Navigation\";\nimport Settings from \"./components/settings/Settings\";\nimport HeaderContainer from \"./components/header/HeaderContainer\";\nimport Login from \"./components/login/Login\";\nimport Preloader from \"./components/preloader/Preloader\";\n\nimport './css/Reset-styles.css';\nimport './css/App.css';\n\n// lazy load - ленивая загрузка, компоненты подгружаются когда надо\nconst DialogsContainer = React.lazy(() => import(\"./components/dialogs/DialogsContainer\"));\nconst ProfileContainer = React.lazy(() => import(\"./components/profile/ProfileContainer\"));\nconst UsersContainer = React.lazy(() => import(\"./components/users/UsersContainer\"));\nconst News = React.lazy(() => import(\"./components/news/News\"));\nconst Music = React.lazy(() => import(\"./components/music/Music\"));\n\nclass App extends React.Component {\n\n    // проверка авторизации пользователя\n    componentDidMount() {\n        this.props.initializeApp();\n    }\n\n    render() {\n\n        // если мы не авторизированы верни прелоадер\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n\n        return (\n            <div className=\"app-wrapper\">\n                <HeaderContainer/>\n\n                {/*МЕНЮ слева*/}\n                <Navigation name={this.props.appState.dialogsPage.dialogsData}\n                            userItem={this.props.appState.sidebar.userData}/>\n\n                <div className=\"content\">\n\n                    {/*данные находятся в state.js*/}\n                    <Route path='/profile/:userId?' render={() =>\n                        <Suspense fallback={<Preloader />}>\n                            <ProfileContainer/>\n                        </Suspense>\n                    }/>\n                    <Route path='/dialogs' render={() =>\n                        <Suspense fallback={<Preloader />}>\n                            <DialogsContainer/>\n                        </Suspense>\n                    }/>\n                    <Route path='/news' render={() =>\n                        <Suspense fallback={<Preloader />}>\n                            <News/>\n                        </Suspense>}/>\n\n                    <Route path='/music' render={() =>\n                        <Suspense fallback={<Preloader />}>\n                            <Music/>\n                        </Suspense>}/>\n\n                    {/*можно вызвать как имя функции*/}\n                    <Route path='/users' render={() =>\n                        <Suspense fallback={<Preloader />}>\n                            <UsersContainer/>\n                        </Suspense>\n                    }/>\n\n                    {/*можно вызвать как имя функции*/}\n                    <Route path='/settings' render={() => <Settings/>}/>\n\n                    {/*можно вызвать как имя функции*/}\n                    <Route path='/login' render={() => <Login/>}/>\n\n                </div>\n\n            </div>\n        );\n    }\n}\n\n// проверка в appreducer иницилизации initialState = initialized - true или false\nconst mapStateToProps = (state) => ({\n    initialized: state.appReducer.initialized\n})\n\n//в connecte получаем пропсы авторизации плюс функцию проверки по пропсам авторизован или нет\n// объединяем compose все функции для Route\nexport default compose(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))\n(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport {BrowserRouter} from \"react-router-dom\";\n//------ библиотека react-redux со своим Store\nimport {Provider} from \"react-redux\";\nimport Store from \"./redux/redux-store\";\nimport State from \"./redux/State\";\n\nimport App from './App';\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    // нужен для работы с Router\n    <BrowserRouter>\n\n        <Provider store={Store}>\n            <App appState={State.getState()}/>\n        </Provider>\n\n    </BrowserRouter>, document.getElementById('root'));\n\nserviceWorker.unregister();\n","import React from 'react';\r\n\r\n//-----preloader image\r\nimport preloader from \"../users/img/loader.gif\";\r\n\r\nconst Preloader = (props) => {\r\n    return (\r\n        <img src={preloader} alt=\"preloader\"/>\r\n    )\r\n}\r\n\r\nexport default Preloader;\r\n","// проверка на обязательное поле\r\n// 1 - создаем функцию проверку\r\n// 2 - вешаем на Field-поле нашу проверку = добавление атрибута validate={[]}\r\n// 3 - создаем компоненту к примеру textArea для стилевой обработки ошибок\r\nexport const requiredField = value => {\r\n    if (value) {\r\n        return undefined;\r\n    }\r\n\r\n    return 'Вы ничего не ввели';\r\n}\r\n\r\n// максимальная длина сообщения 30 старый код и новый это thunk Creator\r\n// export const maxLengthField = maxlength => {\r\n//     if (maxlength && maxlength.length > 30) {\r\n//         return 'Ваше сообщение больше 30 символов';\r\n//     }\r\n//     return undefined;\r\n// }\r\nexport const maxLengthCreator = (inputLength) => (maxlength) => {\r\n    if (maxlength && maxlength.length > inputLength) {\r\n        return `Ваше сообщение больше ${inputLength} символов`;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n// не нажат checkbox\r\nexport const touchCheck = (checked) => {\r\n    if (!checked) {\r\n        return `Вы не нажали - Remember me`;\r\n    }\r\n}\r\n","// ------ action type сделаем переменные для все type в наших функциях\r\nimport {getProfile, pofileAPI} from \"../../api/api\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\n// сетаем для страницы профайл наши данные юзера -> потом export по нашему типу\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\n// сетаем для страницы профайл наш статус юзера -> потом export по нашему типу\r\nconst SET_STATUS = 'SET_STATUS';\r\n// удаление поста\r\nconst DELETE_POST='DELETE_POST';\r\n\r\n\r\n//для нашего Redux зададим начальные значения\r\nlet initialState = {\r\n    postData: [\r\n        {id: 1, post: 'как все начиналось? ', likes: 5},\r\n        {id: 2, post: 'фото без подписи', likes: 7},\r\n        {id: 3, post: 'снимки без текста', likes: 3},\r\n        {id: 4, post: 'быть для высокой конверсии', likes: 5},\r\n        {id: 5, post: 'В странах СНГ ситуация', likes: 8}\r\n    ],\r\n    newPostText: 'Введите сообщение для страницы Profile',\r\n    // сначала наш стейт с profile: null (без изменений)\r\n    profile: null,\r\n    // status нашего user\r\n    status: \"\",\r\n};\r\n\r\nconst profilePageReducer = (state = initialState, action) => {\r\n\r\n    // для нашей функции state = this._State.profilePage\r\n    // вместо if используем switch\r\n\r\n    switch (action.type) {\r\n        // case - возможные варианты type\r\n        case ADD_POST :\r\n            // взяли из функции addPosts()\r\n            let newPost= {\r\n                id:6,\r\n                post: action.newMessagesPostText,\r\n                likes: 2\r\n            };\r\n\r\n            return {\r\n                ...state,\r\n                postData: [...state.postData, newPost]\r\n            }\r\n\r\n        // отрисовываем наш стейт со всеми изменениями -> изначально создаем переменную profile: null в initialState\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n\r\n        //когда status прийдет с сервака я хочу его засетать прийдет status сделать action нового status\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status,\r\n            }\r\n\r\n        // удаление поста\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state,\r\n                postData: state.postData.filter(p => p.id != action.postId)\r\n            }\r\n        }\r\n\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\n// ------ функции Action create, которые хранят тип для наших функций\r\n// ------ page Profile\r\nexport const addPostActionCreator = (newMessagesPostText) => {\r\n    return {\r\n        type:ADD_POST,\r\n        newMessagesPostText\r\n    }\r\n}\r\n\r\nexport const setStatus = (status) => {\r\n    return{\r\n        type: SET_STATUS,\r\n        status: status,\r\n    }\r\n}\r\n\r\n// удаление поста\r\nexport const deletePost = (postId) => {\r\n    return {\r\n        type: DELETE_POST,\r\n        postId: postId\r\n    }\r\n};\r\n\r\n// export по нашему типу чтобы получить все данные c user -> добавляем в case\r\nexport const setUserProfile = (profile) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile: profile\r\n    }\r\n}\r\n\r\n// thunk export по нашему типу чтобы получить все данные c user -> добавляем в case\r\nexport const authUser = (userID) => async (dispatch) => {\r\n    // get запрос на адрес https://social-network.samuraijs.com/api/1.0/ хотим получить users\r\n    let response = await getProfile(userID);\r\n    // получаем ответ и записывам весь файл с API со всеми данными\r\n    dispatch(setUserProfile(response.data));\r\n}\r\n\r\n// thunk для status по нашему типу чтобы получить все данные c status -> добавляем в case\r\n// get запрос для userID\r\nexport const getStatus = (userID) => async (dispatch) => {\r\n    let response = await pofileAPI.getStatus(userID)\r\n    dispatch(setStatus(response.data));\r\n}\r\n\r\n// thunk для UPDATEstatus по нашему типу чтобы обновить status на серваке-> добавляем в case\r\n// указываем что и какой status надо обновить\r\nexport const updateStatus = (status) => async (dispatch) => {\r\n    let response = await pofileAPI.updateStatus(status);\r\n    //смотрим в документашку чтобы понять что прийдет в ответ https://social-network.samuraijs.com/docs#profile_status_put = если 0 то ок если 1 то ошибка\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status));\r\n    }\r\n}\r\n\r\nexport default profilePageReducer;\r\n","// ------ action type сделаем переменные для все type в наших функциях\r\nconst ADD_NEW_MESSAGE = 'ADD-NEW-MESSAGE';\r\n\r\n//для нашего Redux зададим начальные значения\r\nlet initialState = {\r\n    dialogsData: [\r\n        {\r\n            id: 1,\r\n            name: \"Dima\",\r\n            age: 24,\r\n            avatarUrl: 'https://cdn.iconscout.com/icon/free/png-256/avatar-380-456332.png'\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Sveta\",\r\n            age: 27,\r\n            avatarUrl: 'https://www.pngarts.com/files/3/Avatar-PNG-High-Quality-Image.png'\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Lena\",\r\n            age: 29,\r\n            avatarUrl: 'https://www.pngarts.com/files/3/Avatar-PNG-High-Quality-Image.png'\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Oleg\",\r\n            age: 23,\r\n            avatarUrl: 'https://cdn.iconscout.com/icon/free/png-256/avatar-380-456332.png'\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Sasha\",\r\n            age: 21,\r\n            avatarUrl: 'https://www.pngarts.com/files/3/Avatar-PNG-High-Quality-Image.png'\r\n        }\r\n    ],\r\n\r\n    textData: [\r\n        {id: 1, text: 'Hi'},\r\n        {id: 2, text: 'Hello'},\r\n        {id: 3, text: 'Whats up?'},\r\n        {id: 4, text: 'Its ok'},\r\n        {id: 5, text: 'Lets go'},\r\n        {id: 6, text: 'Cool'},\r\n    ]\r\n}\r\n\r\nconst dialogsPageReducer = (state = initialState, action) => {\r\n    // вместо if используем switch\r\n    switch (action.type) {\r\n        case ADD_NEW_MESSAGE:\r\n            let newMessages = {\r\n                id: 7,\r\n                text: action.newMessagesText\r\n            }\r\n            return{\r\n                ...state,\r\n                textData: [...state.textData, newMessages],\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// ------ функции Action create, которые хранят тип для наших функций\r\n// ------ page Dialogs\r\nexport const addNewMessageActionCreator = (newMessagesText) => {\r\n    return {\r\n        type: ADD_NEW_MESSAGE,\r\n        newMessagesText\r\n    }\r\n}\r\n\r\nexport default dialogsPageReducer;\r\n","import React from \"react\";\r\n\r\nimport './FormsControls.css';\r\n\r\n// 1 - создаем TextArea\r\n// 2 - делаем реструктуризацию в пропсах - исключаем input и meta, и добавляем все остальные пропсы\r\n// 3 - экспорт в нужный Field, добавление атрибута component={TextArea}\r\n// 4 - в meta обычно приходит touched, error, warning - можем взять из пропсов\r\nexport const TextArea = ({input, meta, ...props}) => {\r\n\r\n    const showError = meta.touched && meta.error;\r\n\r\n    return (\r\n        <div className={\"formControl\"+\" \"+(showError ? \"error\" :\"\")}>\r\n            <textarea  {...input} {...props}/>\r\n            {showError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n// 1 - создаем inputForm для нашей компоненты login\r\nexport const inputForm = ({input, meta, ...props}) => {\r\n    const showError = meta.touched && meta.error;\r\n\r\n    return (\r\n        <div className={\"formControl\"+\" \"+(showError ? \"error\" :\"\")}>\r\n            <input {...input} {...props}/>\r\n            {showError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n// Объеденим все проверки инпутов и textarea  в одну проверку минимизация\r\n// export const FormControl = (props) => {\r\n//     const showError = meta.touched && meta.error;\r\n//\r\n//     return (\r\n//         <div className={\"formControl\"+\" \"+(showError ? \"error\" :\"\")}>\r\n//             {props.children}\r\n//             {showError ? <span>{meta.error}</span>: <span>Все ок</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// export const TextAreaSmall = (props) => {\r\n//     const {input, meta, child, ...restProps} = props;\r\n//     return (\r\n//         <FormControl {...props}>\r\n//             <textarea  {...input} {...restProps}/>\r\n//         </FormControl>\r\n//     )\r\n// }\r\n//\r\n// export const InputSmall = (props) => {\r\n//     const {input, meta, child, ...restProps} = props;\r\n//     return (\r\n//         <FormControl {...props}>\r\n//             <input  {...input} {...restProps}/>\r\n//         </FormControl>\r\n//     )\r\n// }\r\n\r\n\r\n"],"sourceRoot":""}