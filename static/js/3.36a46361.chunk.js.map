{"version":3,"sources":["components/hoc/WithAuthRedirect.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/profile/Myposts/Post/Post.js","components/profile/Myposts/MyPostForm/MyPostsForm.js","components/profile/Myposts/Myposts.js","components/profile/Myposts/MypostsContainer.js","components/profile/ProfileHooks/ProfileStatusWithHooks.js","components/profile/info/Info.js","components/profile/Profile.js","components/profile/ProfileContainer.js"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","Post","className","src","alt","id","message","likesCount","mMaxLengthField","maxLengthCreator","MyPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","name","placeholder","validate","requiredField","Myposts","memo","mypostsData","profilePage","postData","map","post","likes","key","addPost","newMessagesPostText","MypostsContainer","State","newPostText","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onClick","onBlur","updateStatus","autoFocus","onChange","e","currentTarget","Info","profile","photos","large","small","fullName","abouMe","contacts","facebook","vk","instagram","github","lookingForAJobDescription","Preloader","Profile","ProfileContainer","userID","match","params","userId","authorizedUserId","history","path","authUser","getStatus","ProfileContainerCompose","compose","withRouter"],"mappings":"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","file":"static/js/3.36a46361.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\n// пропсы для страницы Profile\r\nlet mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n// компонент вида HOC - high order component\r\nexport const WithAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            //------------------------------ функция Redirect если пользователь незалогинен\r\n            if (this.props.isAuth === false) return <Redirect to={'/login'}/>;\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let AuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return AuthRedirectComponent;\r\n}\r\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from \"react\";\r\n\r\nimport './post.css';\r\n\r\n// ----- props ----- это имя параметра для функции\r\n// значения props - это атрибуты нашего тега (КОМПОНЕНТЫ, тк она рисуется как тег)\r\nconst Post = (props)=> {\r\n    return(\r\n        <li className=\"myposts-item\">\r\n            <img src=\"https://klike.net/uploads/posts/2019-03/1551511801_1.jpg\" alt=\"ava-post\"/>\r\n\r\n            {/*props.message - это значение атрибута message тега <Post />*/}\r\n            <p>я сообщение номер {props.id} - {props.message}</p>\r\n\r\n            <div className=\"mypost-like\">\r\n                <span>likes - {props.likesCount}</span>\r\n            </div>\r\n\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../../FormsControls/FormsControls\";\r\n\r\nconst  mMaxLengthField = maxLengthCreator(30);\r\n\r\nconst MyPostsForm = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field\r\n                component={TextArea}\r\n                name={\"newMessagesPostText\"}\r\n                placeholder={\"Введите свое сообщение\"}\r\n\r\n                //проверка на заполнение\r\n                validate={[requiredField,mMaxLengthField]}\r\n            />\r\n            <button>Add post</button>\r\n        </form>\r\n    );\r\n};\r\n\r\n// redux store для нашей form\r\nconst MyPostFormRedux = reduxForm({\r\n    form: \"profileMyPostForm\"\r\n})(MyPostsForm);\r\n\r\nexport default MyPostFormRedux;\r\n","import React from \"react\";\r\n// импорт одного поста\r\nimport Post from \"./Post/Post\";\r\n\r\nimport './myposts.css';\r\nimport MyPostFormRedux from \"./MyPostForm/MyPostsForm\";\r\n\r\n\r\n// ------ React.memo - чтобы компонента не перересовывалась несколько раз\r\nconst Myposts = React.memo(props => {\r\n\r\n    let mypostsData = props.profilePage.postData.map((post) =>\r\n        <Post\r\n            id={post.id}\r\n            message={post.post}\r\n            likesCount={post.likes}\r\n            key={post.id}\r\n        />\r\n    );\r\n\r\n    //передача всех значений из формы которые ввел user в profilePage - reducer\r\n    const addNewPostMessages = (value) => {\r\n        props.addPost(value.newMessagesPostText); // - название нашего textarea\r\n    }\r\n\r\n    return (\r\n        <div className=\"myposts\">\r\n            <h2>New Posts</h2>\r\n\r\n            <div className=\"add-post\">\r\n\r\n                <MyPostFormRedux onSubmit={addNewPostMessages}/>\r\n\r\n            </div>\r\n\r\n            <ul className=\"myposts-block\">\r\n\r\n                {mypostsData}\r\n\r\n            </ul>\r\n\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Myposts;\r\n","import React from \"react\";\r\nimport Myposts from \"./Myposts\";\r\n\r\n// ------ import функции CONNECT для нашей компоненты\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n// ------ import функции Action create, которые хранят тип для наших функций, из reducer\r\nimport {addPostActionCreator} from \"../../../redux/reducer/profilePage\";\r\n\r\n// ------ определение функций для CONNECT\r\n// -- функции с данными где State это State = Store.getState();\r\nlet mapStateToProps = (State) => {\r\n    return {\r\n        profilePage: State.profilePage,\r\n        newPostText: State.profilePage.newPostText\r\n    }\r\n}\r\n\r\n//-- закинем вторым параметром ссылки на нужные dispatch action create бывший mapDispatchToProps\r\nconst MypostsContainer = connect(mapStateToProps,{\r\n    addPost: addPostActionCreator,\r\n})(Myposts);\r\n\r\nexport default MypostsContainer;\r\n","import React, {useEffect, useState} from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    // hook\r\n    // функция которая вначале скажет что наш State = false - для проверки\r\n    // запишем в виде реструризации массива где 1 эл = 1 элементу массива, 2=2 и тд\r\n    // 2-ое значение в этом массиве это функция которую мы будем менять\r\n    // делаем столько хуков сколько надо для компоненты\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n\r\n    //----------------------------hook синхронизации для вывода нашего статуса в input\r\n    // при изменении статуса - сохраняется статус на сервере - перерисовывается наш value inputa\r\n    // выполняется только когда будут изменения на странице\r\n    // если props.status не такой как был раньше запусти useEffect\r\n    useEffect( ()=> {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    // ------------------------------------------------------------- функции для изменения статуса\r\n    // клик по статусу чтобы его изменить БЕРЕМ ИЗ ХУКА !!!!!!\r\n    const activateEditMode = () => {\r\n        // функция из хука useState\r\n        setEditMode(true);\r\n    }\r\n\r\n    // клик по статусу чтобы его изменить БЕРЕМ ИЗ ХУКА !!!!!!\r\n    const deActivateEditMode = () => {\r\n        // метод из Хука который перезапишет обьект который мы передаем  (сво-ва обьекта)\r\n        setEditMode(false);\r\n\r\n        // статус когда обновили\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    // ------------------------------------------------------------- функции вывода статуса\r\n    // функция для того чтобы менять состояние state input (печатать слова в инпуте) для сохранения его в локальном стейте\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"status\">\r\n\r\n            {/*если не меняется поле ввода input*/}\r\n            {!editMode &&\r\n                <div className=\"status-my\">\r\n                    <span onClick={activateEditMode}>{!status ? 'Статуса нет': status}</span>\r\n                </div>\r\n            }\r\n\r\n            {/*если мы вносим новые слова в input*/}\r\n            {editMode &&\r\n                <div className=\"status-new\">\r\n                    <input\r\n                        onBlur={deActivateEditMode}\r\n                        autoFocus={true}\r\n                        onChange={onStatusChange}\r\n                        value={status}\r\n                    />\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from \"react\";\r\nimport Preloader from \"../../preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"../ProfileHooks/ProfileStatusWithHooks\";\r\n\r\nimport './info.css';\r\n\r\nconst Info = (props) => {\r\n\r\n    if (!props.profile) {\r\n        return (\r\n            <Preloader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"info\">\r\n\r\n            <div className=\"content-head\">\r\n                <img src=\"https://of-crimea.ru/plug/Peschanye-plyazhi-Kryma.jpg\" alt=\"beach\"/>\r\n            </div>\r\n\r\n            <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n\r\n            <div className=\"posts\">\r\n                <img src={props.profile.photos.large} alt=\"logo-photos\"/>\r\n                <h1>Avatar</h1>\r\n                <img src={props.profile.photos.small} alt=\"logo-small\"/>\r\n                <p>Мое имя - {props.profile.fullName}</p>\r\n                <p>{props.profile.abouMe}</p>\r\n\r\n                <h2>Contacts</h2>\r\n                <ul>\r\n                    <li>facebook - {props.profile.contacts.facebook}</li>\r\n                    <li>vk - {props.profile.contacts.vk}</li>\r\n                    <li>insta - {props.profile.contacts.instagram}</li>\r\n                    <li>github - {props.profile.contacts.github}</li>\r\n                </ul>\r\n\r\n                <p>что я ищу - {props.profile.lookingForAJobDescription}</p>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Info;\r\n","import React from \"react\";\r\n\r\nimport \"./profile.css\";\r\n\r\nimport MypostsContainer from \"./Myposts/MypostsContainer\";\r\n// импорт постов\r\nimport Info from \"./info/Info\";\r\n\r\n\r\nconst Profile = (props) => {\r\n  return (\r\n      <div className=\"profile\">\r\n\r\n          <Info profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n\r\n          <MypostsContainer />\r\n\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {authUser, getStatus, updateStatus} from \"../../redux/reducer/profilePage\";\r\nimport {WithAuthRedirect} from \"../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    // можно не использовать тк ничего внутри не происходит кроме получения props\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    //метод жизненного цикла - методы которые есть у обьекта, который создан с помощью этого класса\r\n    // и React работает с этим обьектом через эти методы\r\n    componentDidMount() {\r\n\r\n        // достанем user-id из url нашего profile\r\n        let userID = this.props.match.params.userId;\r\n\r\n        // покажет того user который забит руками в userID если мы не выберем в user конкретного\r\n        // мой ID = моему аккаунту на сайте https://social-network.samuraijs.com/account\r\n        if (!userID) {\r\n            //userID = 8581; // - это мой личный id\r\n            // мой id есть в authReducer в initialState = userId: null,\r\n            // но надо сделать redirect на страницу userID\r\n            userID = this.props.authorizedUserId; // - берем из пропсов из mapStateToProps\r\n            //но если опять userID необнаружен то отправим на страницу регистрации\r\n            if (!userID) {\r\n                this.props.history.path('/login')\r\n            }\r\n        }\r\n\r\n        this.props.authUser(userID);\r\n        this.props.getStatus(userID);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                {/*props для компоненты Profile*/}\r\n                <Profile\r\n                    {...this.props}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                />\r\n\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\n// пропсы для страницы Profile\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status, // - взяли из profilePageReducer\r\n        authorizedUserId: state.auth.userId, // - взяли из redux-store\r\n        isAuth: state.auth.isAuth, // - взяли из redux-store\r\n    }\r\n}\r\n\r\n//Это утилита из Redux для удобства вывода нескольких функций подряд\r\n// ProfileContainer -> WithAuthRedirect -> withRouter -> connect\r\nlet ProfileContainerCompose = compose(\r\n    connect(mapStateToProps, {authUser, getStatus, updateStatus}),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileContainer);\r\n\r\n// компонент вида HOC - high order component который делает проверку логина\r\n//let AuthRedirectComponent = WithAuthRedirect(ProfileContainer);\r\n\r\n\r\n\r\n\r\n// перед выводом компоненты ProfileContainer мы еще раз ее прогоним через новый Container - старая запись\r\n// для работы с URLом компоненты (чтобы записать данные с URL)\r\n// и получилась НОВАЯ компонента ProfileContainer\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\r\n\r\n// создаем наши коннекты по переменным и редьюсеры и передаем их в profile - старая запись\r\n// connect сам сделает вызов с переменными и сделает автоматически dispatch\r\n// export default connect(mapStateToProps, {authUser}) (WithUrlDataContainerComponent);\r\n\r\nexport default ProfileContainerCompose;\r\n"],"sourceRoot":""}