{"version":3,"sources":["components/hoc/WithAuthRedirect.js","components/dialogs/dialog-item/DialogItem.js","components/dialogs/message/Message.js","components/dialogs/MyDialogsForm/MyDialogsForm.js","components/dialogs/Dialogs.js","components/dialogs/DialogsContainer.js"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","path","id","className","src","avatar","alt","name","age","Message","text","mMaxLengthField","maxLengthCreator","MyDialogsFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","placeholder","validate","requiredField","Dialogs","dialogElements","dialogsPage","dialogsData","map","dialog","avatarUrl","key","messagesElements","textData","values","addNewMessage","newMessagesText","DialogsContainer","compose","State","addNewMessageActionCreator"],"mappings":"oNAKIA,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAKdE,EAAmB,SAACC,GAAe,IAEtCC,EAFqC,uKAKnC,OAA0B,IAAtBC,KAAKC,MAAMN,OAAyB,kBAAC,IAAD,CAAUO,GAAI,WAE/C,kBAACJ,EAAcE,KAAKC,WAPQ,GAEXE,IAAML,WAWtC,OAF4BM,YAAQX,EAARW,CAAoCL,K,sICHrDM,G,OAfI,SAACJ,GAGhB,IAAIK,EAAO,YAAYL,EAAMM,GAE7B,OACI,wBAAIC,UAAU,6BAEV,yBAAKC,IAAKR,EAAMS,OAAQC,IAAI,aAE5B,kBAAC,IAAD,CAAST,GAAII,GAAQL,EAAMW,KAA3B,IAAkCX,EAAMY,QCFrCC,G,OATC,SAACb,GACb,OACI,wBAAIO,UAAU,yBACV,yBAAKA,UAAU,sBAAsBP,EAAMc,MAC3C,yBAAKP,UAAU,uBAAuBP,EAAMc,S,kCCFjDC,EAAkBC,YAAiB,IAwB3BC,EAJYC,YAAU,CACjCC,KAAK,uBADkBD,EAlBL,SAAClB,GAEnB,OACI,0BAAMoB,SAAUpB,EAAMqB,cAClB,kBAACC,EAAA,EAAD,CACIC,UAAWC,IACXb,KAAM,kBACNc,YAAa,yIAGbC,SAAU,CAACC,IAAcZ,KAE7B,gDCkCGa,G,OA/CC,SAAC5B,GACb,IAAI6B,EAAiB7B,EAAM8B,YAAYC,YAAYC,KAAK,SAACC,GAAD,OACpD,kBAAC,EAAD,CACI3B,GAAI2B,EAAO3B,GACXK,KAAMsB,EAAOtB,KACbC,IAAKqB,EAAOrB,IACZH,OAAQwB,EAAOC,UACfC,IAAKF,EAAO3B,QAIhB8B,EAAmBpC,EAAM8B,YAAYO,SAASL,KAAI,SAAClB,GAAD,OAClD,kBAAC,EAAD,CACIR,GAAIQ,EAAKR,GACTQ,KAAMA,EAAKA,KACXqB,IAAKrB,EAAKR,QASlB,OACI,yBAAKC,UAAU,WAGX,wBAAIA,UAAU,iBACRsB,GAIN,wBAAItB,UAAU,oBACT6B,GAGL,yBAAK7B,UAAU,gBAEX,kBAAC,EAAD,CAAoBa,SAnBX,SAACkB,GAClBtC,EAAMuC,cAAcD,EAAOE,wB,gCCL/BC,EAAmBC,YACnBvC,aAXiB,SAACwC,GAClB,MAAO,CACHb,YAAaa,EAAMb,YACnBU,gBAAiBG,EAAMb,YAAYU,mBAQf,CACpBD,cAAeK,MAEnBhD,IAJmB8C,CAKtBd,GAWca","file":"static/js/4.6ca81927.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\n// пропсы для страницы Profile\r\nlet mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n// компонент вида HOC - high order component\r\nexport const WithAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            //------------------------------ функция Redirect если пользователь незалогинен\r\n            if (this.props.isAuth === false) return <Redirect to={'/login'}/>;\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let AuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return AuthRedirectComponent;\r\n}\r\n","import {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nimport './dialogItem.css';\r\n\r\nconst DialogItem = (props) => {\r\n\r\n    // переменная для получения пути\r\n    let path = \"/dialogs/\"+props.id;\r\n\r\n    return(\r\n        <li className=\"dialogs-users-item active\">\r\n            {/*аватар*/}\r\n            <img src={props.avatar} alt=\"ava-post\"/>\r\n\r\n            <NavLink to={path} >{props.name} {props.age}</NavLink>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\n\r\nimport './message.css';\r\n\r\nconst Message = (props) => {\r\n    return(\r\n        <li className=\"dialogs-messages-item\">\r\n            <div className=\"messages-item-left\">{props.text}</div>\r\n            <div className=\"messages-item-right\">{props.text}</div>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../../FormsControls/FormsControls\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\r\n\r\n// для проверки на максимальную длину сообщения в 30символов\r\nconst  mMaxLengthField = maxLengthCreator(30);\r\n\r\nconst MyDialogsForm = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field\r\n                component={TextArea}\r\n                name={\"newMessagesText\"}\r\n                placeholder={\"Введите свое сообщение ProfilePage\"}\r\n\r\n                //проверка на заполнение\r\n                validate={[requiredField,mMaxLengthField]}\r\n            />\r\n            <button>Add post</button>\r\n        </form>\r\n    );\r\n};\r\n\r\n// добавление нашей формы в redux-form\r\nconst MyDialogsFormRedux = reduxForm({\r\n    form:\"dialogMyDialogsForm\"\r\n})(MyDialogsForm );\r\n\r\nexport default MyDialogsFormRedux;\r\n","import React from \"react\";\r\nimport DialogItem from \"./dialog-item/DialogItem\";\r\nimport Message from \"./message/Message\";\r\nimport MyDialogsFormRedux from \"./MyDialogsForm/MyDialogsForm\";\r\n\r\nimport './dialogs.css';\r\n\r\nconst Dialogs = (props) => {\r\n    let dialogElements = props.dialogsPage.dialogsData.map( (dialog) =>\r\n        <DialogItem\r\n            id={dialog.id}\r\n            name={dialog.name}\r\n            age={dialog.age}\r\n            avatar={dialog.avatarUrl}\r\n            key={dialog.id}\r\n        />);\r\n\r\n    // теперь данные берем у родительского файла через props\r\n    let messagesElements = props.dialogsPage.textData.map((text) =>\r\n        <Message\r\n            id={text.id}\r\n            text={text.text}\r\n            key={text.id}\r\n        />);\r\n\r\n\r\n    //передача всех значений из формы которые ввел user в dialogsPage - reducer\r\n    const addNewDialog = (values) => {\r\n        props.addNewMessage(values.newMessagesText); // - название нашего textarea\r\n    }\r\n\r\n    return (\r\n        <div className=\"dialogs\">\r\n\r\n            {/*--------------------------------список людей в чате*/}\r\n            <ul className=\"dialogs-users\">\r\n                { dialogElements }\r\n            </ul>\r\n\r\n            {/*--------------------------------текст сообщений в чате*/}\r\n            <ul className=\"dialogs-messages\">\r\n                {messagesElements}\r\n            </ul>\r\n\r\n            <div className=\"dialogs-form\">\r\n\r\n                <MyDialogsFormRedux onSubmit={addNewDialog}/>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\n// ------ import функции CONNECT для нашей компоненты\r\nimport {connect} from \"react-redux\";\r\n\r\n// ------ import функции Action create, которые хранят тип для наших функций, из reducer\r\nimport {addNewMessageActionCreator} from \"../../redux/reducer/dialogsPage\";\r\nimport {WithAuthRedirect} from \"../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n// ------ определение функций для CONNECT\r\n// -- функции с данными где State это State = Store.getState();\r\nlet mapStateToProp = (State)=> {\r\n    return {\r\n        dialogsPage: State.dialogsPage,\r\n        newMessagesText: State.dialogsPage.newMessagesText\r\n    }\r\n}\r\n\r\n//Это утилита из Redux для удобства вывода нескольких функций подряд\r\n//compose — это библиотека с уже готовыми компонентами высшего порядка. Идея в том, чтобы писать stateless-компоненты и разделять код на логические части\r\n// берем Dialogs кидаем в  WithAuthRedirect кидаем в Connect\r\nlet DialogsContainer = compose(\r\n    connect(mapStateToProp, {\r\n        addNewMessage: addNewMessageActionCreator\r\n    }),\r\n    WithAuthRedirect)\r\n(Dialogs);\r\n\r\n// компонент вида HOC - high order component который делает проверку логина - старая запись\r\n// let AuthRedirectComponent = WithAuthRedirect(Dialogs);\r\n\r\n//-- закинем вторым параметром ссылки на нужные dispatch action create бывший mapDispatchToProps - старая запись\r\n// const DialogsContainer = connect(mapStateToProp, {\r\n//     addNewMessage: addNewMessageActionCreator,\r\n//     updateMessageText: updateMessageTextActionCreator\r\n// }) (AuthRedirectComponent);\r\n\r\nexport default DialogsContainer;\r\n"],"sourceRoot":""}